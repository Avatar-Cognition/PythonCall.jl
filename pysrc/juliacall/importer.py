import base64
import io
import os
import sys

from . import newmodule, Base
from importlib.machinery import ModuleSpec, SourceFileLoader

class Finder:
    def __init__(self, jlext='.jl', pyext='.py'):
        self.jlext = jlext
        self.pyext = pyext

    def find_spec(self, fullname, path, target=None):
        if path is None:
            path = sys.path
            if '.' in fullname:
                return
            name = fullname
        else:
            name = fullname.split('.')[-1]
        for root in path:
            jlfile = os.path.join(root, name + self.jlext)
            if os.path.isfile(jlfile):
                jlfile = os.path.realpath(jlfile)
                pyfile = os.path.join(root, name + self.pyext)
                gen_file(jlfile, pyfile)
                return ModuleSpec(fullname, SourceFileLoader(fullname, pyfile), origin=jlfile)

def install(**kw):
    finder = Finder(**kw)
    sys.meta_path.insert(0, finder)
    return finder

def uninstall(finder):
    sys.meta_path.remove(finder)

def gen_code(jl):
    jlb = base64.b64encode(jl.encode('utf8')).decode('ascii')
    buf = io.StringIO()
    pr = lambda x: print(x, file=buf)
    pr('# This file was automatically generated by juliacall.importer')
    pr('import juliacall.importer')
    pr('juliacall.importer.exec_module(__name__, """')
    for i in range(0, len(jlb), 80):
        pr(jlb[i:i+80])
    pr('""")')
    return buf.getvalue()

def gen_file(jl, py):
    with open(jl) as fp:
        jlcode = fp.read()
    pycode = gen_code(jlcode)
    with open(py, 'w') as fp:
        fp.write(pycode)

def exec_module(name, code):
    pymod = sys.modules[name]
    code = base64.b64decode(code.encode('ascii')).decode('utf8')
    jlmod = newmodule(name)
    jlmod.seval('begin\n' + code + '\nend')
    delattr(pymod, 'juliacall')
    setattr(pymod, '__jl_code__', code)
    setattr(pymod, '__jl_module__', jlmod)
    ks = [str(k) for k in Base.names(jlmod)]
    ks = [k for k in ks if k != name]
    if not ks:
        ks = [str(k) for k in Base.names(jlmod, all=True)]
        ks = [k for k in ks if not (k == name or k == 'include' or k == 'eval' or k.startswith('_') or '#' in k)]
    setattr(pymod, '__all__', ks)
    setattr(pymod, '__doc__', str(Base.Docs.doc(jlmod)))
    for k in ks:
        setattr(pymod, k, getattr(jlmod, k))
